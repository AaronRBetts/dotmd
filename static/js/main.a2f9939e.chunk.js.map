{"version":3,"sources":["components/Header.js","components/MDPreviewer.js","styles/theme.js","styles/global.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","id","className","NavbarText","Component","MDPreviewer","props","handleChange","e","setState","text","target","value","clear","state","this","marked","setOptions","breaks","convertedMD","onClick","icon","faTrash","onChange","dangerouslySetInnerHTML","__html","lightTheme","body","toggleBorder","gradient","darkTheme","GlobalStyles","createGlobalStyle","theme","App","useState","setTheme","document","getElementById","style","display","faSun","faMoon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAGqBA,E,uKAEjB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,SAASC,UAAU,0CAC5B,kBAACC,EAAA,EAAD,CAAYD,UAAU,aAAtB,SACA,kBAACC,EAAA,EAAD,KAAY,wD,GALgBC,a,+BC6CfC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,KAAMF,EAAEG,OAAOC,SATA,EAmBnBC,MAAQ,WACN,EAAKJ,SAAS,CACZC,KAAM,MAnBR,EAAKI,MAAQ,CACXJ,KA/CY,igCA4CG,E,iDAadC,M,+BAYK,IACHD,EAAQK,KAAKD,MAAbJ,KACLM,IAAOC,WAAW,CAChBC,QAAQ,IAEV,IAAIC,EAAcH,IAAON,GAEzB,OACE,yBAAKT,GAAG,eACN,yBAAKA,GAAG,cAAcC,UAAU,uBAC9B,yBAAKA,UAAU,sBACb,sCACA,4BAAQD,GAAG,WAAWC,UAAU,MAAMkB,QAASL,KAAKF,OAAO,kBAAC,IAAD,CAAiBQ,KAAMC,QAEpF,8BAAUrB,GAAG,SAASW,MAAOF,EAAMa,SAAUR,KAAKR,gBAEpD,yBAAKN,GAAG,eAAeC,UAAU,uBAC/B,yBAAKA,UAAU,eAAc,4CAC7B,yBAAKA,UAAU,MAAMD,GAAG,UAAUuB,wBAAyB,CAACC,OAAQN,KACpE,yBAAKjB,UAAU,eAAc,qCAC7B,yBAAKA,UAAU,MAAMD,GAAG,eAAekB,U,GA9CRf,a,QChD5BsB,EAAa,CACxBC,KAAM,UACNjB,KAAM,UACNkB,aAAc,OACdC,SAAU,qCAGCC,EAAY,CACvBH,KAAM,UACNjB,KAAM,UACNkB,aAAc,WACdC,SAAU,qC,uWCTL,IAAME,EAAeC,YAAH,KAST,qBAAGC,MAAkBN,QAC1B,qBAAGM,MAAkBvB,QC0BjBwB,MA5Bf,WAAgB,IAAD,EACaC,mBAAS,SADtB,mBACNF,EADM,KACCG,EADD,KAab,OACE,kBAAC,IAAD,CAAeH,MAAiB,UAAVA,EAAoBP,EAAaI,GACrD,kBAACC,EAAD,MACA,yBAAK7B,UAAU,WACb,4BAAQD,GAAG,WAAWC,UAAU,MAAMkB,QAdxB,WACJ,UAAVa,GACFG,EAAS,QACTC,SAASC,eAAe,QAAQC,MAAMC,QAAU,SAEhDJ,EAAS,SACTC,SAASC,eAAe,QAAQC,MAAMC,QAAU,aAS5C,kBAAC,IAAD,CAAiBvC,GAAG,OAAOoB,KAAMoB,MACjC,kBAAC,IAAD,CAAiBxC,GAAG,OAAOoB,KAAMqB,OAEnC,kBAAC,EAAD,MACA,kBAAC,EAAD,SCpBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASC,eAAe,SDyHpB,kBAAmBa,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2f9939e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Navbar, NavbarText } from 'reactstrap';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar id=\"header\" className=\"justify-content-center align-items-end\">\r\n        <NavbarText className=\"display-3\">dotmd</NavbarText>\r\n        <NavbarText><em>Markdown previewer</em></NavbarText>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport marked from 'marked';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst initialState = `\r\n# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  console.log(firstLine, lastLine)\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**, _italic_, or **_both!_**\r\nYou can ~~cross stuff out~~.\r\nThere's also [links](https://aaronrbetts.github.io), and\r\n> Block Quotes!\r\n\r\nWe have tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Here | And even here!\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n    - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n\r\n`\r\n\r\nexport default class MDPreviewer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      text: initialState\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    })\r\n  }\r\n\r\n  copy(target) {\r\n    // const toSelect = document.getElementById(target);\r\n    // toSelect.select();\r\n    // document.execCommand('copy');\r\n  }\r\n\r\n  clear = () => {\r\n    this.setState({\r\n      text: '',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let {text} = this.state;\r\n    marked.setOptions({\r\n      breaks: true,\r\n    });\r\n    let convertedMD = marked(text);\r\n\r\n    return (\r\n      <div id=\"mainSection\">\r\n        <div id=\"leftSection\" className=\"p-2 section-wrapper\">\r\n          <div className=\"p-2 heading d-flex\">\r\n            <h4>Editor</h4>\r\n            <button id=\"clearBtn\" className=\"btn\" onClick={this.clear}><FontAwesomeIcon icon={faTrash} /></button>\r\n          </div>\r\n          <textarea id=\"editor\" value={text} onChange={this.handleChange}></textarea>\r\n        </div>\r\n        <div id=\"rightSection\" className=\"p-2 section-wrapper\">\r\n          <div className=\"p-2 heading\"><h4>.md Preview</h4></div>\r\n          <div className=\"p-1\" id=\"preview\" dangerouslySetInnerHTML={{__html: convertedMD}}></div>\r\n          <div className=\"p-2 heading\"><h4>Html</h4></div>\r\n          <div className=\"p-1\" id=\"previewHtml\">{convertedMD}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","export const lightTheme = {\r\n  body: '#ffefd3',\r\n  text: '#001b2e',\r\n  toggleBorder: '#FFF',\r\n  gradient: 'linear-gradient(#39598A, #79d7Ed)',\r\n}\r\n\r\nexport const darkTheme = {\r\n  body: '#001b2e',\r\n  text: '#FAFAFA',\r\n  toggleBorder: '#6B8096F',\r\n  gradient: 'linear-gradient(#091236, #1E215D)',\r\n}","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n*,\r\n*::after,\r\n*::before {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.body};\r\n  color: ${({ theme }) => theme.text};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  margin: 0;\r\n  padding: 0;\r\n  transition: all 0.25s linear\r\n}`","import React, { useState } from 'react';\nimport './styles/App.css';\nimport Header from './components/Header.js';\nimport MDPreviewer from './components/MDPreviewer';\nimport { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './styles/theme.js';\nimport { GlobalStyles } from './styles/global.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n      document.getElementById('star').style.display = 'none';\n    } else {\n      setTheme('light')\n      document.getElementById('star').style.display = 'initial';\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <GlobalStyles />\n      <div className=\"wrapper\">\n        <button id=\"themeBtn\" className=\"btn\" onClick={toggleTheme}>\n          <FontAwesomeIcon id=\"star\" icon={faSun} />\n          <FontAwesomeIcon id=\"moon\" icon={faMoon} />\n        </button>\n        <Header />\n        <MDPreviewer />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}